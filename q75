class Vehicle: 
    def __init__(self, make, model, year): 
        self.make = make 
        self.model = model 
        self.year = year
    
    def display_info(self): 
        print(f"{self.year} {self.make} {self.model}")

class Car(Vehicle): 
    def __init__(self, make, model, year, fuel_type): 
        super().__init__(make, model, year)
        self.fuel_type = fuel_type
    
    def display_info(self): 
        super().display_info()
        print(f"Fuel type: {self.fuel_type}")

my_car = Car("Toyota", "Corolla", 2020, "Petrol")
my_car.display_info()

print("\nThis program is written by Prabhav. \nERPID: 0221BCA011")
from abc import ABC, abstractmethod
class Animal(ABC):
    @abstractmethod
    def speak(self):
        pass
class Dog(Animal):
    def speak(self):
        return "Woof!"
class Cat(Animal):
    def speak(self):
        return "Meow!"
dog = Dog()
cat = Cat()
print(dog.speak())
print(cat.speak())

print("\nThis program is written by Prabhav. \nERPID: 0221BCA011")
